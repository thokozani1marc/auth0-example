{"version":3,"file":"auth0-auth0-angular.js","sources":["../../../projects/auth0-angular/src/useragent.ts","../../../projects/auth0-angular/src/lib/auth.client.ts","../../../projects/auth0-angular/src/lib/abstract-navigator.ts","../../../projects/auth0-angular/src/lib/auth.service.ts","../../../projects/auth0-angular/src/lib/auth.config.ts","../../../projects/auth0-angular/src/lib/auth.guard.ts","../../../projects/auth0-angular/src/lib/auth.module.ts","../../../projects/auth0-angular/src/lib/auth.interceptor.ts","../../../projects/auth0-angular/src/public-api.ts","../../../projects/auth0-angular/src/auth0-auth0-angular.ts"],"names":[],"mappings":"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","sourcesContent":["export default { name: '@auth0/auth0-angular', version: '1.0.0' };\n","import { InjectionToken } from '@angular/core';\nimport { Auth0Client } from '@auth0/auth0-spa-js';\nimport { AuthConfig } from './auth.config';\nimport useragent from '../useragent';\n\nexport class Auth0ClientFactory {\n  static createClient(config: AuthConfig): Auth0Client {\n    const { redirectUri, clientId, maxAge, ...rest } = config;\n\n    return new Auth0Client({\n      redirect_uri: redirectUri,\n      client_id: clientId,\n      max_age: maxAge,\n      ...rest,\n      auth0Client: {\n        name: useragent.name,\n        version: useragent.version,\n      },\n    });\n  }\n}\n\nexport const Auth0ClientService = new InjectionToken<Auth0Client>(\n  'auth0.client'\n);\n","import { Injectable, Inject, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AbstractNavigator {\n  private readonly router: Router;\n\n  constructor(private location: Location, injector: Injector) {\n    try {\n      this.router = injector.get(Router);\n    } catch {}\n  }\n\n  /**\n   * Navigates to the specified url. The router will be used if one is available, otherwise it falls back\n   * to `window.history.replaceState`.\n   * @param url The url to navigate to\n   */\n  navigateByUrl(url: string): void {\n    if (this.router) {\n      setTimeout(() => {\n        this.router.navigateByUrl(url);\n      }, 0);\n\n      return;\n    }\n\n    this.location.replaceState(url);\n  }\n}\n","import { Injectable, Inject, OnDestroy } from '@angular/core';\n\nimport {\n  Auth0Client,\n  RedirectLoginOptions,\n  PopupLoginOptions,\n  PopupConfigOptions,\n  LogoutOptions,\n  GetTokenSilentlyOptions,\n  GetTokenWithPopupOptions,\n  RedirectLoginResult,\n} from '@auth0/auth0-spa-js';\n\nimport {\n  of,\n  from,\n  BehaviorSubject,\n  Subject,\n  Observable,\n  iif,\n  defer,\n  ReplaySubject,\n} from 'rxjs';\n\nimport {\n  concatMap,\n  tap,\n  map,\n  filter,\n  takeUntil,\n  distinctUntilChanged,\n  catchError,\n  switchMap,\n} from 'rxjs/operators';\n\nimport { Auth0ClientService } from './auth.client';\nimport { AbstractNavigator } from './abstract-navigator';\nimport { Location } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService implements OnDestroy {\n  private isLoadingSubject$ = new BehaviorSubject(true);\n  private isAuthenticatedSubject$ = new BehaviorSubject(false);\n  private errorSubject$ = new ReplaySubject<Error>(1);\n\n  // https://stackoverflow.com/a/41177163\n  private ngUnsubscribe$ = new Subject();\n\n  /**\n   * Emits boolean values indicating the loading state of the SDK.\n   */\n  readonly isLoading$ = this.isLoadingSubject$.asObservable();\n\n  /**\n   * Emits boolean values indicating the authentication state of the user. If `true`, it means a user has authenticated.\n   * This depends on the value of `isLoading$`, so there is no need to manually check the loading state of the SDK.\n   */\n  readonly isAuthenticated$ = this.isLoading$.pipe(\n    filter((loading) => !loading),\n    distinctUntilChanged(),\n    concatMap(() => this.isAuthenticatedSubject$)\n  );\n\n  /**\n   * Emits details about the authenticated user when `isAuthenticated$` is `true`.\n   */\n  readonly user$ = this.isAuthenticated$.pipe(\n    filter((authenticated) => authenticated),\n    distinctUntilChanged(),\n    concatMap(() => this.auth0Client.getUser())\n  );\n\n  /**\n   * Emits errors that occur during login, or when checking for an active session on startup.\n   */\n  readonly error$ = this.errorSubject$.asObservable();\n\n  constructor(\n    @Inject(Auth0ClientService) private auth0Client: Auth0Client,\n    private location: Location,\n    private navigator: AbstractNavigator\n  ) {\n    const checkSessionOrCallback$ = (isCallback: boolean) =>\n      iif(\n        () => isCallback,\n        this.handleRedirectCallback(),\n        defer(() => this.auth0Client.checkSession())\n      );\n\n    this.shouldHandleCallback()\n      .pipe(\n        switchMap((isCallback) =>\n          checkSessionOrCallback$(isCallback).pipe(\n            catchError((error) => {\n              this.errorSubject$.next(error);\n              this.navigator.navigateByUrl('/');\n              return of(undefined);\n            })\n          )\n        ),\n        concatMap(() => this.auth0Client.isAuthenticated()),\n        tap((authenticated) => {\n          this.isAuthenticatedSubject$.next(authenticated);\n          this.isLoadingSubject$.next(false);\n        }),\n        takeUntil(this.ngUnsubscribe$)\n      )\n      .subscribe();\n  }\n\n  /**\n   * Called when the service is destroyed\n   */\n  ngOnDestroy(): void {\n    // https://stackoverflow.com/a/41177163\n    this.ngUnsubscribe$.next();\n    this.ngUnsubscribe$.complete();\n  }\n\n  /**\n   * ```js\n   * loginWithRedirect(options);\n   * ```\n   *\n   * Performs a redirect to `/authorize` using the parameters\n   * provided as arguments. Random and secure `state` and `nonce`\n   * parameters will be auto-generated.\n   *\n   * @param options The login options\n   */\n  loginWithRedirect(options?: RedirectLoginOptions): Observable<void> {\n    return from(this.auth0Client.loginWithRedirect(options));\n  }\n\n  /**\n   * ```js\n   * await loginWithPopup(options);\n   * ```\n   *\n   * Opens a popup with the `/authorize` URL using the parameters\n   * provided as arguments. Random and secure `state` and `nonce`\n   * parameters will be auto-generated. If the response is successful,\n   * results will be valid according to their expiration times.\n   *\n   * IMPORTANT: This method has to be called from an event handler\n   * that was started by the user like a button click, for example,\n   * otherwise the popup will be blocked in most browsers.\n   *\n   * @param options The login options\n   * @param config Configuration for the popup window\n   */\n  loginWithPopup(\n    options?: PopupLoginOptions,\n    config?: PopupConfigOptions\n  ): Observable<void> {\n    return from(\n      this.auth0Client.loginWithPopup(options, config).then(async () => {\n        this.isAuthenticatedSubject$.next(\n          await this.auth0Client.isAuthenticated()\n        );\n      })\n    );\n  }\n\n  /**\n   * ```js\n   * logout();\n   * ```\n   *\n   * Clears the application session and performs a redirect to `/v2/logout`, using\n   * the parameters provided as arguments, to clear the Auth0 session.\n   * If the `federated` option is specified it also clears the Identity Provider session.\n   * If the `localOnly` option is specified, it only clears the application session.\n   * It is invalid to set both the `federated` and `localOnly` options to `true`,\n   * and an error will be thrown if you do.\n   * [Read more about how Logout works at Auth0](https://auth0.com/docs/logout).\n   *\n   * @param options The logout options\n   */\n  logout(options?: LogoutOptions): void {\n    this.auth0Client.logout(options);\n\n    if (options?.localOnly) {\n      this.isAuthenticatedSubject$.next(false);\n    }\n  }\n\n  /**\n   * ```js\n   * getAccessTokenSilently(options).subscribe(token => ...)\n   * ```\n   *\n   * If there's a valid token stored, return it. Otherwise, opens an\n   * iframe with the `/authorize` URL using the parameters provided\n   * as arguments. Random and secure `state` and `nonce` parameters\n   * will be auto-generated. If the response is successful, results\n   * will be valid according to their expiration times.\n   *\n   * If refresh tokens are used, the token endpoint is called directly with the\n   * 'refresh_token' grant. If no refresh token is available to make this call,\n   * the SDK falls back to using an iframe to the '/authorize' URL.\n   *\n   * This method may use a web worker to perform the token call if the in-memory\n   * cache is used.\n   *\n   * If an `audience` value is given to this function, the SDK always falls\n   * back to using an iframe to make the token exchange.\n   *\n   * Note that in all cases, falling back to an iframe requires access to\n   * the `auth0` cookie, and thus will not work in browsers that block third-party\n   * cookies by default (Safari, Brave, etc).\n   *\n   * @param options The options for configuring the token fetch.\n   */\n  getAccessTokenSilently(\n    options?: GetTokenSilentlyOptions\n  ): Observable<string> {\n    return of(this.auth0Client).pipe(\n      concatMap((client) => client.getTokenSilently(options))\n    );\n  }\n\n  /**\n   * ```js\n   * getTokenWithPopup(options).subscribe(token => ...)\n   * ```\n   *\n   * Get an access token interactively.\n   *\n   * Opens a popup with the `/authorize` URL using the parameters\n   * provided as arguments. Random and secure `state` and `nonce`\n   * parameters will be auto-generated. If the response is successful,\n   * results will be valid according to their expiration times.\n   */\n  getAccessTokenWithPopup(\n    options?: GetTokenWithPopupOptions\n  ): Observable<string> {\n    return of(this.auth0Client).pipe(\n      concatMap((client) => client.getTokenWithPopup(options))\n    );\n  }\n\n  private shouldHandleCallback(): Observable<boolean> {\n    return of(this.location.path()).pipe(\n      map(\n        (search) =>\n          (search.includes('code=') || search.includes('error=')) &&\n          search.includes('state=')\n      )\n    );\n  }\n\n  private handleRedirectCallback(): Observable<RedirectLoginResult> {\n    return defer(() => this.auth0Client.handleRedirectCallback()).pipe(\n      tap((result) => {\n        const target = result?.appState?.target ?? '/';\n        this.navigator.navigateByUrl(target);\n      })\n    );\n  }\n}\n","import { CacheLocation, GetTokenSilentlyOptions } from '@auth0/auth0-spa-js';\nimport { InjectionToken } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\n/**\n * Defines the type for a route config entry. Can either be:\n *\n * - an object of type HttpInterceptorConfig\n * - a string\n */\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n/**\n * A custom type guard to help identify route definitions that are actually HttpInterceptorRouteConfig types.\n * @param def The route definition type\n */\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\n/**\n * Configuration for the HttpInterceptor\n */\nexport interface HttpInterceptorConfig {\n  allowedList: ApiRouteDefinition[];\n}\n\n/**\n * Configuration for a single interceptor route\n */\nexport interface HttpInterceptorRouteConfig {\n  /**\n   * The URL to test, by supplying the URL to match.\n   * If `test` is a match for the current request path from the HTTP client, then\n   * an access token is attached to the request in the\n   *  [\"Authorization\" header](https://tools.ietf.org/html/draft-ietf-oauth-v2-bearer-20#section-2.1).\n   *\n   * If the test does not pass, the request proceeds without the access token attached.\n   *\n   * A wildcard character can be used to match only the start of the URL.\n   *\n   * @usagenotes\n   *\n   * '/api' - exactly match the route /api\n   * '/api/*' - match any route that starts with /api/\n   */\n  uri: string;\n\n  /**\n   * The options that are passed to the SDK when retrieving the\n   * access token to attach to the outgoing request.\n   */\n  tokenOptions?: GetTokenSilentlyOptions;\n\n  /**\n   * The HTTP method to match on. If specified, the HTTP method of\n   * the outgoing request will be checked against this. If there is no match, the\n   * Authorization header is not attached.\n   *\n   * The HTTP method name is case-sensitive.\n   */\n  httpMethod?: HttpMethod | string;\n}\n\n/**\n * Configuration for the authentication service\n */\nexport interface AuthConfig {\n  /**\n   * Your Auth0 account domain such as `'example.auth0.com'`,\n   * `'example.eu.auth0.com'` or , `'example.mycompany.com'`\n   * (when using [custom domains](https://auth0.com/docs/custom-domains))\n   */\n  domain: string;\n\n  /**\n   * The issuer to be used for validation of JWTs, optionally defaults to the domain above\n   */\n  issuer?: string;\n\n  /**\n   * The Client ID found on your Application settings page\n   */\n  clientId: string;\n\n  /**\n   * The default URL where Auth0 will redirect your browser to with\n   * the authentication result. It must be added to the\n   * \"Allowed Callback URLs\" field in your Auth0 Application's\n   * settings. If not provided here, it should be provided in the other\n   * methods that provide authentication.\n   */\n  redirectUri?: string;\n\n  /**\n   * The value in seconds used to account for clock skew in JWT expirations.\n   * Typically, this value is no more than a minute or two at maximum.\n   * Defaults to 60s.\n   */\n  leeway?: number;\n\n  /**\n   * The location to use when storing cache data. Valid values are `memory` or `localstorage`.\n   * The default setting is `memory`.\n   */\n  cacheLocation?: CacheLocation;\n\n  /**\n   * If true, refresh tokens are used to fetch new access tokens from the Auth0 server.\n   * If false, the legacy technique of using a hidden iframe and the `authorization_code` grant with `prompt=none` is used.\n   * The default setting is `false`.\n   *\n   * **Note**: Use of refresh tokens must be enabled by an administrator on your Auth0 client application.\n   */\n  useRefreshTokens?: boolean;\n\n  /**\n   * A maximum number of seconds to wait before declaring background calls to /authorize as failed for timeout\n   * Defaults to 60s.\n   */\n  authorizeTimeoutInSeconds?: number;\n\n  /**\n   * Changes to recommended defaults, like defaultScope\n   */\n  advancedOptions?: {\n    /**\n     * The default scope to be included with all requests.\n     * If not provided, 'openid profile email' is used. This can be set to `null` in order to effectively remove the default scopes.\n     *\n     * Note: The `openid` scope is **always applied** regardless of this setting.\n     */\n    defaultScope?: string;\n  };\n\n  /**\n   * Maximum allowable elapsed time (in seconds) since authentication.\n   * If the last time the user authenticated is greater than this value,\n   * the user must be reauthenticated.\n   */\n  maxAge?: string | number;\n\n  /**\n   * The default scope to be used on authentication requests.\n   * The defaultScope defined in the Auth0Client is included\n   * along with this scope\n   */\n  scope?: string;\n\n  /**\n   * The default audience to be used for requesting API access.\n   */\n  audience?: string;\n\n  /**\n   * Configuration for the built-in Http Interceptor, used for\n   * automatically attaching access tokens.\n   */\n  httpInterceptor?: HttpInterceptorConfig;\n\n  /**\n   * If you need to send custom parameters to the Authorization Server,\n   * make sure to use the original parameter name.\n   */\n  [key: string]: any;\n}\n\n/**\n * Injection token for accessing configuration.\n *\n * @usageNotes\n *\n * Use the `Inject` decorator to access the configuration from a service or component:\n *\n * ```\n * class MyService(@Inject(AuthConfigService) config: AuthConfig) {}\n * ```\n */\nexport const AuthConfigService = new InjectionToken<AuthConfig>(\n  'auth0-angular.config'\n);\n","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  CanActivate,\n  CanLoad,\n  Route,\n  UrlSegment,\n  CanActivateChild,\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { tap, take } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate, CanLoad, CanActivateChild {\n  constructor(private auth: AuthService) {}\n\n  canLoad(route: Route, segments: UrlSegment[]): Observable<boolean> {\n    return this.auth.isAuthenticated$.pipe(take(1));\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.redirectIfUnauthenticated(state);\n  }\n\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.redirectIfUnauthenticated(state);\n  }\n\n  private redirectIfUnauthenticated(\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.auth.isAuthenticated$.pipe(\n      tap((loggedIn) => {\n        if (!loggedIn) {\n          this.auth.loginWithRedirect({ appState: { target: state.url } });\n        } else {\n          return of(true);\n        }\n      })\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { AuthConfig, AuthConfigService } from './auth.config';\nimport { Auth0ClientService, Auth0ClientFactory } from './auth.client';\nimport { AuthGuard } from './auth.guard';\n\n@NgModule()\nexport class AuthModule {\n  static forRoot(config: AuthConfig): ModuleWithProviders<AuthModule> {\n    const defaultConfig: AuthConfig = {\n      redirectUri: window.location.origin,\n      ...config,\n    };\n\n    return {\n      ngModule: AuthModule,\n      providers: [\n        AuthService,\n        AuthGuard,\n        { provide: AuthConfigService, useValue: defaultConfig },\n        {\n          provide: Auth0ClientService,\n          useValue: Auth0ClientFactory.createClient(defaultConfig),\n        },\n      ],\n    };\n  }\n}\n","import {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, from, of, iif } from 'rxjs';\nimport { Injectable, Inject } from '@angular/core';\n\nimport {\n  AuthConfig,\n  AuthConfigService,\n  HttpInterceptorRouteConfig,\n  ApiRouteDefinition,\n  isHttpInterceptorRouteConfig,\n} from './auth.config';\n\nimport { Auth0ClientService } from './auth.client';\nimport { Auth0Client } from '@auth0/auth0-spa-js';\nimport { switchMap, first, concatMap, pluck } from 'rxjs/operators';\n\n@Injectable()\nexport class AuthHttpInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(AuthConfigService) private config: AuthConfig,\n    @Inject(Auth0ClientService) private auth0Client: Auth0Client\n  ) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.config.httpInterceptor?.allowedList) {\n      return next.handle(req);\n    }\n\n    return this.findMatchingRoute(req).pipe(\n      concatMap((route) =>\n        iif(\n          // Check if a route was matched\n          () => route !== null,\n          // If we have a matching route, call getTokenSilently and attach the token to the\n          // outgoing request\n          of(route).pipe(\n            pluck('tokenOptions'),\n            concatMap((options) => this.auth0Client.getTokenSilently(options)),\n            switchMap((token: string) => {\n              // Clone the request and attach the bearer token\n              const clone = req.clone({\n                headers: req.headers.set('Authorization', `Bearer ${token}`),\n              });\n\n              return next.handle(clone);\n            })\n          ),\n          // If the URI being called was not found in our httpInterceptor config, simply\n          // pass the request through without attaching a token\n          next.handle(req)\n        )\n      )\n    );\n  }\n\n  /**\n   * Strips the query and fragment from the given uri\n   * @param uri The uri to remove the query and fragment from\n   */\n  private stripQueryFrom(uri: string): string {\n    if (uri.indexOf('?') > -1) {\n      uri = uri.substr(0, uri.indexOf('?'));\n    }\n\n    if (uri.indexOf('#') > -1) {\n      uri = uri.substr(0, uri.indexOf('#'));\n    }\n\n    return uri;\n  }\n\n  /**\n   * Determines whether the specified route can have an access token attached to it, based on matching the HTTP request against\n   * the interceptor route configuration.\n   * @param route The route to test\n   * @param request The HTTP request\n   */\n  private canAttachToken(\n    route: ApiRouteDefinition,\n    request: HttpRequest<any>\n  ): boolean {\n    const testPrimitive = (value: string) => {\n      if (value) {\n        value.trim();\n      }\n\n      if (!value) {\n        return false;\n      }\n\n      const requestPath = this.stripQueryFrom(request.url);\n\n      if (value === requestPath) {\n        return true;\n      }\n\n      // If the URL ends with an asterisk, match using startsWith.\n      if (\n        value.indexOf('*') === value.length - 1 &&\n        request.url.startsWith(value.substr(0, value.length - 1))\n      ) {\n        return true;\n      }\n    };\n\n    if (isHttpInterceptorRouteConfig(route)) {\n      if (route.httpMethod && route.httpMethod !== request.method) {\n        return false;\n      }\n\n      return testPrimitive(route.uri);\n    }\n\n    return testPrimitive(route);\n  }\n\n  /**\n   * Tries to match a route from the SDK configuration to the HTTP request.\n   * If a match is found, the route configuration is returned.\n   * @param request The Http request\n   */\n  private findMatchingRoute(\n    request: HttpRequest<any>\n  ): Observable<HttpInterceptorRouteConfig> {\n    return from(this.config.httpInterceptor.allowedList).pipe(\n      first((route) => this.canAttachToken(route, request), null)\n    );\n  }\n}\n","/*\n * Public API Surface of auth0-angular\n */\n\nexport * from './lib/auth.service';\nexport * from './lib/auth.module';\nexport * from './lib/auth.guard';\nexport * from './lib/auth.interceptor';\nexport * from './lib/auth.config';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AbstractNavigator as ɵb} from './lib/abstract-navigator';\nexport {Auth0ClientService as ɵa} from './lib/auth.client';"]}